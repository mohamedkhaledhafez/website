(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return c}));var a=t(2),i=t(6),m=(t(0),t(106)),r={id:"maximum-sum-subarray",title:"Maximum Sum Subarray"},l={unversionedId:"maximum-sum-subarray",id:"maximum-sum-subarray",isDocsHomePage:!1,title:"Maximum Sum Subarray",description:"Problem",source:"@site/docs/53.maximum-sum-subarray.md",slug:"/maximum-sum-subarray",permalink:"/docs/maximum-sum-subarray",editUrl:"https://github.com/techfellows/website/edit/master/website/docs/docs/53.maximum-sum-subarray.md",version:"current",sidebar:"algorithmsAndDataStructuresSidebar",previous:{title:"Trapping Rain Water",permalink:"/docs/trapping-rain-water"},next:{title:"Word Search",permalink:"/docs/word-search"}},u=[{value:"Problem",id:"problem",children:[]},{value:"Problem Description",id:"problem-description",children:[]},{value:"Solution",id:"solution",children:[]},{value:"Key Points",id:"key-points",children:[]},{value:"Code (<code>Java/Python3/Javascript</code>)",id:"code-javapython3javascript",children:[]},{value:"Follow Up",id:"follow-up",children:[]}],b={rightToc:u};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(m.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(m.b)("h2",{id:"problem"},"Problem"),Object(m.b)("p",null,Object(m.b)("a",Object(a.a)({parentName:"p"},{href:"https://leetcode.com/problems/maximum-subarray/"}),"https://leetcode.com/problems/maximum-subarray/")),Object(m.b)("h2",{id:"problem-description"},"Problem Description"),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{}),"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nExample:\n\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\nFollow up:\n\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n")),Object(m.b)("h2",{id:"solution"},"Solution"),Object(m.b)("p",null,"Below will explain 4 different approaches to solve this problem."),Object(m.b)("h4",{id:"solution-1---brute-force"},"Solution #1 - Brute Force"),Object(m.b)("p",null,"Usually start from brute force when you don't have any idea, then step by step to optimize your solution."),Object(m.b)("p",null,Object(m.b)("strong",{parentName:"p"},"Brute Force\uff1a"),"\uff08TLE\uff09"),Object(m.b)("p",null,"Subarray sum, we then need to know subarray range ","[l, r]",", 2 ",Object(m.b)("inlineCode",{parentName:"p"},"for")," loop, list all possible subarrays, then 1 ",Object(m.b)("inlineCode",{parentName:"p"},"for")," loop to calculate current subarray sum,\nusing a global variable to keep track ",Object(m.b)("inlineCode",{parentName:"p"},"maxSum"),". This approach has very bad performance\uff0ctime complexity is ",Object(m.b)("inlineCode",{parentName:"p"},"O(n^3)"),"."),Object(m.b)("h4",{id:"complexity-analysis"},"Complexity Analysis"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Time Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(n^3) - n array length")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Space Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(1)"))),Object(m.b)("h4",{id:"solution-2---prefixsum--brute-force"},"Solution #2 - PrefixSum + Brute Force"),Object(m.b)("p",null,Object(m.b)("strong",{parentName:"p"},"Optimal brute force\uff1a")," (AC\uff09"),Object(m.b)("p",null,"With brute force approach, we can precalculate prefixSum, so that no need to calculate subarray sum every time, time complexity can reduce to ",Object(m.b)("inlineCode",{parentName:"p"},"O(n^2)")),Object(m.b)("p",null,"calculate prefixSum, for giving subarray range ",Object(m.b)("inlineCode",{parentName:"p"},"[l,r]"),",\ncurrent subarray sum: ",Object(m.b)("inlineCode",{parentName:"p"},"subarraySum = prefixSum[r] - prefixSum[l - 1];"),"\nglobal variable ",Object(m.b)("inlineCode",{parentName:"p"},"maxSum"),", compare every possible subarray sum to record max sum, ",Object(m.b)("inlineCode",{parentName:"p"},"maxSum = max(maxSum, subarraySum)"),"."),Object(m.b)("h4",{id:"complexity-analysis-1"},"Complexity Analysis"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Time Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(n^2) - n array length")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Space Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(n) - prefixSum array length n"))),Object(m.b)("blockquote",null,Object(m.b)("p",{parentName:"blockquote"},"If update original input array to represent prefix sum, then space will reduce to ",Object(m.b)("inlineCode",{parentName:"p"},"O(1)"))),Object(m.b)("p",null,"With this optimization, the time complexity is still too high, can we come up better optimization approach."),Object(m.b)("p",null,"yes, optimized prefix sum"),Object(m.b)("h4",{id:"solution-3---optimized-prefix-sum---from-lucifer"},"Solution #3 - optimized prefix sum - from ",Object(m.b)("a",Object(a.a)({parentName:"h4"},{href:"https://github.com/azl397985856"}),Object(m.b)("strong",{parentName:"a"},"@lucifer"))),Object(m.b)("p",null,"we define",Object(m.b)("inlineCode",{parentName:"p"},"S(i)")," \uff0cuse to calculate sum from range ",Object(m.b)("inlineCode",{parentName:"p"},"[0, i]"),"\u3002"),Object(m.b)("p",null,"then ",Object(m.b)("inlineCode",{parentName:"p"},"S(j) - S(i - 1)")," is sum of range ",Object(m.b)("inlineCode",{parentName:"p"},"[i, j]"),"."),Object(m.b)("p",null,"Here, we can get all ",Object(m.b)("inlineCode",{parentName:"p"},"S[i] , (i = 0,1,2....,n-1)")," with one loop array.\nat the same time, we get min sum from ",Object(m.b)("inlineCode",{parentName:"p"},"S[k], (k = 0\uff0c1\uff0ci-1)"),", then"),Object(m.b)("p",null,Object(m.b)("inlineCode",{parentName:"p"},"maxSum = max(maxSum, S[i] - minSum)"),"."),Object(m.b)("p",null,"Here we maintain two variables ",Object(m.b)("inlineCode",{parentName:"p"},"minSum"),", ",Object(m.b)("inlineCode",{parentName:"p"},"maxSum"),"."),Object(m.b)("h4",{id:"complexity-analysis-2"},"Complexity Analysis"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Time Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(n) - n array length")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Space Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(1)"))),Object(m.b)("h4",{id:"solution-4---divide-and-conquer"},"Solution #4 - ",Object(m.b)("a",Object(a.a)({parentName:"h4"},{href:"https://www.wikiwand.com/en/Divide-and-conquer_algorithm"}),"Divide and Conquer")),Object(m.b)("p",null,"We partition array ",Object(m.b)("inlineCode",{parentName:"p"},"nums")," into two smaller arrays (",Object(m.b)("inlineCode",{parentName:"p"},"left")," and ",Object(m.b)("inlineCode",{parentName:"p"},"right"),") from middle index ",Object(m.b)("inlineCode",{parentName:"p"},"m"),","),Object(m.b)("p",null,"Then we have two arrays:"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"left = nums[0]...nums[m - 1]")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"right = nums[m + 1]...nums[n-1]"))),Object(m.b)("p",null,"The maximum subarray sum can be either one of below three maximum sum:"),Object(m.b)("ol",null,Object(m.b)("li",{parentName:"ol"},"Consider middle element ",Object(m.b)("inlineCode",{parentName:"li"},"nums[m]"),", Cross left and right subarray, the maximum sum is sum of")),Object(m.b)("p",null,"maximum left array suffix sum - leftMaxSum, maximum right array prefix sum - rightMaxSum and middle element - nums","[m]","\n-> ",Object(m.b)("inlineCode",{parentName:"p"},"crossMaxSum = leftMaxSum + rightMaxSum + nums[m]")),Object(m.b)("ol",{start:2},Object(m.b)("li",{parentName:"ol"},"Dont' contain middle element ",Object(m.b)("inlineCode",{parentName:"li"},"nums[m]"),", maxSum is in ",Object(m.b)("inlineCode",{parentName:"li"},"left"),", left do recursive return max."),Object(m.b)("li",{parentName:"ol"},"Don't contain middle element ",Object(m.b)("inlineCode",{parentName:"li"},"nums[m]"),", maxSum is in ",Object(m.b)("inlineCode",{parentName:"li"},"right"),", right do recursive return max.")),Object(m.b)("p",null,"The maximum sum is ",Object(m.b)("inlineCode",{parentName:"p"},"max(left, right, crossMaxSum)")),Object(m.b)("p",null,"For example, ",Object(m.b)("inlineCode",{parentName:"p"},"nums=[-2,1,-3,4,-1,2,1,-5,4]")),Object(m.b)("p",null,Object(m.b)("img",Object(a.a)({parentName:"p"},{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1ghltxdvaw8j31400u07ps.jpg",alt:"maximum subarray sum divide conquer"}))),Object(m.b)("h4",{id:"complexity-analysis-3"},"Complexity Analysis"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Time Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(nlogn) - n input array length")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Space Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(1)"))),Object(m.b)("h4",{id:"solution-5---dynamic-programing"},"Solution #5 - ",Object(m.b)("a",Object(a.a)({parentName:"h4"},{href:"https://www.wikiwand.com/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92"}),"Dynamic Programing")),Object(m.b)("p",null,"Key points of DP is to find DP formula and initial state. Assume we have"),Object(m.b)("p",null,Object(m.b)("inlineCode",{parentName:"p"},"dp[i] - maximum sum of subarray that ends at index i")),Object(m.b)("p",null,"DP formula:\n",Object(m.b)("inlineCode",{parentName:"p"},"dp[i] = max(dp[i - 1] + nums[i], nums[i])")),Object(m.b)("p",null,"Initial state\uff1a",Object(m.b)("inlineCode",{parentName:"p"},"dp[0] = nums[0]")),Object(m.b)("p",null,"From above DP formula, notice only need to access its previous element at each step. In this case, we can use two variables,"),Object(m.b)("p",null,Object(m.b)("inlineCode",{parentName:"p"},"currMaxSum - maximum sum of subarray that must end with current index i"),"."),Object(m.b)("p",null,Object(m.b)("inlineCode",{parentName:"p"},"maxSum - global maximum subarray sum")),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"currMaxSum = max(currMaxSum + nums[i], nums[i]")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"maxSum = max(currMaxSum, maxSum)"))),Object(m.b)("p",null,"As below pic:\n",Object(m.b)("img",Object(a.a)({parentName:"p"},{src:"https://tva1.sinaimg.cn/large/007S8ZIlly1ghltxeq0b6j30pj0h2abm.jpg",alt:"maximum subarray sum dp"}))),Object(m.b)("h4",{id:"complexity-analysis-4"},"Complexity Analysis"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Time Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(n) - n array length")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("em",{parentName:"li"},"Space Complexity:")," ",Object(m.b)("inlineCode",{parentName:"li"},"O(1)"))),Object(m.b)("h2",{id:"key-points"},"Key Points"),Object(m.b)("ol",null,Object(m.b)("li",{parentName:"ol"},"Brute force, list all possible subarray, calculate sum for each subarray (use prefixSum to optimize), return max."),Object(m.b)("li",{parentName:"ol"},"Divide and Conquer, from middle index, divide array into left and right part.\nRecursively get left maximum sum and right maximum sum, and include middle element maximum sum.\n",Object(m.b)("inlineCode",{parentName:"li"},"return max(leftMaxSum, rightMaxSum, and crossMaxSum)"),"."),Object(m.b)("li",{parentName:"ol"},"Dynamic Programming, find DP formula and initial state, and identify initial value, return maximum sum subarray\u3002")),Object(m.b)("h2",{id:"code-javapython3javascript"},"Code (",Object(m.b)("inlineCode",{parentName:"h2"},"Java/Python3/Javascript"),")"),Object(m.b)("h4",{id:"solution-2---prefixsum--brute-force-1"},"Solution #2 - PrefixSum + Brute Force"),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Java code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class MaximumSubarrayPrefixSum {\n  public int maxSubArray(int[] nums) {\n      int len = nums.length;\n      int maxSum = Integer.MIN_VALUE;\n      int sum = 0;\n      for (int i = 0; i < len; i++) {\n        sum = 0;\n        for (int j = i; j < len; j++) {\n          sum += nums[j];\n          maxSum = Math.max(maxSum, sum);\n        }\n      }\n      return maxSum;\n  }\n}\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Python3 code")," ",Object(m.b)("inlineCode",{parentName:"p"},"(TLE)")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = -sys.maxsize\n        sum = 0\n        for i in range(n):\n            sum = 0\n            for j in range(i, n):\n                sum += nums[j]\n                maxSum = max(maxSum, sum)\n\n        return maxSum\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Javascript code")," from ",Object(m.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/azl397985856"}),Object(m.b)("strong",{parentName:"a"},"@lucifer"))),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function LSS(list) {\n  const len = list.length;\n  let max = -Number.MAX_VALUE;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum = 0;\n    for (let j = i; j < len; j++) {\n      sum += list[j];\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n\n  return max;\n}\n")),Object(m.b)("h4",{id:"solution-3"},"Solution #3"),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Java code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class MaxSumSubarray {\n  public int maxSubArray3(int[] nums) {\n      int maxSum = nums[0];\n      int sum = 0;\n      int minSum = 0;\n      for (int num : nums) {\n        // prefix Sum\n        sum += num;\n        // update maxSum\n        maxSum = Math.max(maxSum, sum - minSum);\n        // update minSum\n        minSum = Math.min(minSum, sum);\n      }\n      return maxSum;\n  }\n}\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Python3 code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        maxSum = nums[0]\n        minSum = sum = 0\n        for i in range(n):\n            sum += nums[i]\n            maxSum = max(maxSum, sum - minSum)\n            minSum = min(minSum, sum)\n\n        return maxSum\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Javascript code")," from ",Object(m.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/azl397985856"}),Object(m.b)("strong",{parentName:"a"},"@lucifer"))),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  let min = 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += list[i];\n    if (sum - min > max) max = sum - min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n\n  return max;\n}\n")),Object(m.b)("h4",{id:"solution-4---divide-and-conquer-1"},"Solution #4 - Divide and Conquer"),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Java code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class MaximumSubarrayDivideConquer {\n  public int maxSubArrayDividConquer(int[] nums) {\n      if (nums == null || nums.length == 0) return 0;\n      return helper(nums, 0, nums.length - 1);\n    }\n    private int helper(int[] nums, int l, int r) {\n      if (l > r) return Integer.MIN_VALUE;\n      int mid = (l + r) >>> 1;\n      int left = helper(nums, l, mid - 1);\n      int right = helper(nums, mid + 1, r);\n      int leftMaxSum = 0;\n      int sum = 0;\n      // left surfix maxSum start from index mid - 1 to l\n      for (int i = mid - 1; i >= l; i--) {\n        sum += nums[i];\n        leftMaxSum = Math.max(leftMaxSum, sum);\n      }\n      int rightMaxSum = 0;\n      sum = 0;\n      // right prefix maxSum start from index mid + 1 to r\n      for (int i = mid + 1; i <= r; i++) {\n        sum += nums[i];\n        rightMaxSum = Math.max(sum, rightMaxSum);\n      }\n      // max(left, right, crossSum)\n      return Math.max(leftMaxSum + rightMaxSum + nums[mid], Math.max(left, right));\n    }\n}\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Python3 code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"import sys\nclass Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        return self.helper(nums, 0, len(nums) - 1)\n    def helper(self, nums, l, r):\n        if l > r:\n            return -sys.maxsize\n        mid = (l + r) // 2\n        left = self.helper(nums, l, mid - 1)\n        right = self.helper(nums, mid + 1, r)\n        left_suffix_max_sum = right_prefix_max_sum = 0\n        sum = 0\n        for i in reversed(range(l, mid)):\n            sum += nums[i]\n            left_suffix_max_sum = max(left_suffix_max_sum, sum)\n        sum = 0\n        for i in range(mid + 1, r + 1):\n            sum += nums[i]\n            right_prefix_max_sum = max(right_prefix_max_sum, sum)\n        cross_max_sum = left_suffix_max_sum + right_prefix_max_sum + nums[mid]\n        return max(cross_max_sum, left, right)\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Javascript code")," from ",Object(m.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/azl397985856"}),Object(m.b)("strong",{parentName:"a"},"@lucifer"))),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function helper(list, m, n) {\n  if (m === n) return list[m];\n  let sum = 0;\n  let lmax = -Number.MAX_VALUE;\n  let rmax = -Number.MAX_VALUE;\n  const mid = ((n - m) >> 1) + m;\n  const l = helper(list, m, mid);\n  const r = helper(list, mid + 1, n);\n  for (let i = mid; i >= m; i--) {\n    sum += list[i];\n    if (sum > lmax) lmax = sum;\n  }\n\n  sum = 0;\n\n  for (let i = mid + 1; i <= n; i++) {\n    sum += list[i];\n    if (sum > rmax) rmax = sum;\n  }\n\n  return Math.max(l, r, lmax + rmax);\n}\n\nfunction LSS(list) {\n  return helper(list, 0, list.length - 1);\n}\n")),Object(m.b)("h4",{id:"solution-5---dynamic-programming"},"Solution #5 - Dynamic Programming"),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Java code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class MaximumSubarrayDP {\n  public int maxSubArray(int[] nums) {\n     int currMaxSum = nums[0];\n     int maxSum = nums[0];\n     for (int i = 1; i < nums.length; i++) {\n       currMaxSum = Math.max(currMaxSum + nums[i], nums[i]);\n       maxSum = Math.max(maxSum, currMaxSum);\n     }\n     return maxSum;\n  }\n}\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Python3 code")),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        n = len(nums)\n        max_sum_ending_curr_index = max_sum = nums[0]\n        for i in range(1, n):\n            max_sum_ending_curr_index = max(max_sum_ending_curr_index + nums[i], nums[i])\n            max_sum = max(max_sum_ending_curr_index, max_sum)\n\n        return max_sum\n")),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Javascript code")," from ",Object(m.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/azl397985856"}),Object(m.b)("strong",{parentName:"a"},"@lucifer"))),Object(m.b)("pre",null,Object(m.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function LSS(list) {\n  const len = list.length;\n  let max = list[0];\n  for (let i = 1; i < len; i++) {\n    list[i] = Math.max(0, list[i - 1]) + list[i];\n    if (list[i] > max) max = list[i];\n  }\n\n  return max;\n}\n")),Object(m.b)("h2",{id:"follow-up"},"Follow Up"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},"When given M","*","N matrix, how to calculate maximum submatrix sum?"),Object(m.b)("li",{parentName:"ul"},"When given array, return maximum product subarray? compare with maximum sum subarray, what is the difference?")))}c.isMDXComponent=!0},106:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return d}));var a=t(0),i=t.n(a);function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},m=Object.keys(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var b=i.a.createContext({}),c=function(e){var n=i.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},o=function(e){var n=c(e.components);return i.a.createElement(b.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,m=e.originalType,r=e.parentName,b=u(e,["components","mdxType","originalType","parentName"]),o=c(t),p=a,d=o["".concat(r,".").concat(p)]||o[p]||s[p]||m;return t?i.a.createElement(d,l(l({ref:n},b),{},{components:t})):i.a.createElement(d,l({ref:n},b))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var m=t.length,r=new Array(m);r[0]=p;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var b=2;b<m;b++)r[b]=t[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);